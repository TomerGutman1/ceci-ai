services:
  # ---- Cache Layer ----
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ---- Python micro-service (PandasAI) ----
  pandasai:
    build: 
      context: ./server/src/services/python
      dockerfile: Dockerfile
    env_file:
      - ./.env.prod
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
    restart: always
    expose:
      - "8001"
    networks:
      - ceci-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./server/src/services/python/cache:/app/cache

  # ---- Node backend API ----
  backend:
    build: 
      context: ./server
      dockerfile: Dockerfile
    env_file:
      - ./.env.prod
    environment:
      - NODE_ENV=production
      - PORT=5173
      - PANDASAI_SERVICE_URL=http://pandasai:8001
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      pandasai:
        condition: service_healthy
    restart: always
    expose:
      - "5173"
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---- Static frontend (React build served by internal Nginx) ----
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=/api
        - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
        - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    depends_on:
      - backend
    restart: always
    expose:
      - "80"
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---- Edge reverse-proxy + TLS ----
  nginx:
    build: 
      context: ./deploy/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"     # HTTP → 301 ➜ HTTPS
      - "443:443"   # HTTPS
    depends_on:
      - frontend
      - backend
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always
    networks:
      - ceci-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---- Certbot for SSL renewal (optional) ----
  certbot:
    image: certbot/certbot:latest
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - ceci-network
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  letsencrypt:
    driver: local
  certbot-www:
    driver: local

networks:
  ceci-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
